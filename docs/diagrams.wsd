@startuml

!include skin-state.iuml
hide empty description

[*] --> setup
state setup {
    setup: create list of joints
    setup: create sequence of joins
    setup: set calibration routine per joint

}
setup --> idle
idle --> activate_joint :user starts mastering
idle: set first joint as target for mastering
idle: show dialog
idle: wait
activate_joint --> move_to_first_pose
activate_joint: prepare stuff, like set correct moves list
activate_joint: start first move
move_to_first_pose --> calibrate_joint
move_to_first_pose: wait until current pose is reached
calibrate_joint --> joint_calibrated :done
calibrate_joint: set recording
calibrate_joint: run specific calibration routine
calibrate_joint: stop recording
joint_calibrated --> activate_joint :user not satisfied,\ndo again
joint_calibrated --> set_next_joint :user satisfied
set_next_joint --> activate_joint :next joint exists
set_next_joint: get next joint and set
set_next_joint: set joint as target for mastering
set_next_joint --> move_to_zero :**NO** next joint
move_to_zero: start moving to zero pose
move_to_zero: wait until position is reached
move_to_zero --> finished: position reached
finished: show dialog
finished --> [*]
--
error1: try to solve
error1: try to return to a valid state
error1 --> [*]: solving and returning\nis not possible
--
abort_by_user --> [*] :user abort, stop program
abort_by_user: clean up pins
abort_by_user: clean up signals

@enduml